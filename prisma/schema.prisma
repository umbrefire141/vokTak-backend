generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "public")]
}

model User {
  uuid          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  avatar_id     Int?           @unique
  avatar        Avatar?        @relation(fields: [avatar_id], references: [id])
  email         String         @unique
  nickname      String         @unique
  firstname     String
  lastname      String
  role_id       Int
  created_at    DateTime       @default(now()) @db.Timestamptz(3)
  password      String
  language      LANGUAGES      @default(value: rus)
  updatedAt     DateTime       @updatedAt @db.Timestamptz(3)
  comments      Comment[]
  friends       Friend[]       @relation("friends")
  friendsOf     Friend[]       @relation("friendsOf")
  likes         Like[]
  photos        Photo[]        @relation("photos")
  posts         Post[]
  shares        Share[]
  role          Role           @relation(fields: [role_id], references: [id], onDelete: NoAction)
  messages      Message[]
  user_sessions Session[]      @relation("user_session")
  chats         Chat[]         @relation("chat")
  notifications Notification[]
  user_info     User_Info?
  online        User_Online?   @relation("online")
}

model User_Online {
  id         Int      @id @default(autoincrement())
  online     Boolean
  lastOnline DateTime @default(now()) @db.Timestamptz(3)
  user       User     @relation("online", fields: [user_uuid], references: [uuid])
  user_uuid  String   @unique @db.Uuid
}

model User_Info {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [user_uuid], references: [uuid])
  user_uuid       String    @unique @db.Uuid
  languages       String[]
  currentCity     String?
  hometown        String?
  description     String?
  favorite_movies String[]
  favorite_games  String[]
  occupation      String?
  hobbies         String[]
  birth           DateTime?
}

model Friend {
  id          Int     @id @default(autoincrement())
  user_uuid   String  @db.Uuid
  user        User    @relation("friends", fields: [user_uuid], references: [uuid], onDelete: Cascade)
  confirmed   Boolean @default(false)
  userOf      User    @relation("friendsOf", fields: [userOf_uuid], references: [uuid])
  userOf_uuid String  @db.Uuid
}

model Chat {
  id       Int       @id @default(autoincrement())
  name     String?
  messages Message[]
  users    User[]    @relation("chat")
}

model Message {
  id        Int     @id @default(autoincrement())
  message   String
  chat_id   Int
  user_uuid String  @db.Uuid
  photos    Photo[]
  chat      Chat    @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [user_uuid], references: [uuid], onDelete: SetNull)
}

model Session {
  uuid       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sid        String   @unique
  user_uuid  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(3)
  user       User     @relation("user_session", fields: [user_uuid], references: [uuid], onDelete: Cascade)
}

model Role {
  id    Int        @id @default(autoincrement())
  name  Role_Names
  users User[]
}

model Post {
  uuid       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content    String
  user_uuid  String    @db.Uuid
  hidden     Boolean   @default(false)
  comments   Comment[]
  likes      Like[]
  photos     Photo[]
  author     User      @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  shares     Share[]
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz(3)
}

model Share {
  id        Int     @id @default(autoincrement())
  comment   String?
  user_uuid String? @db.Uuid
  post_uuid String? @db.Uuid
  photos    Photo[]
  post      Post?   @relation(fields: [post_uuid], references: [uuid])
  user      User?   @relation(fields: [user_uuid], references: [uuid])
}

model Comment {
  id         Int      @id @default(autoincrement())
  message    String
  user_uuid  String   @db.Uuid
  post_uuid  String   @db.Uuid
  post       Post     @relation(fields: [post_uuid], references: [uuid], onDelete: Cascade)
  author     User     @relation(fields: [user_uuid], references: [uuid], onDelete: SetNull)
  photos     Photo[]
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model Photo {
  id              Int      @id @default(autoincrement())
  name            String
  alt             String?
  image           String
  user_uuid       String?  @db.Uuid
  chat_message_id Int?
  post_uuid       String?  @db.Uuid
  comment_id      Int?
  share_id        Int?
  hidden          Boolean  @default(false)
  chat_message    Message? @relation(fields: [chat_message_id], references: [id])
  comment         Comment? @relation(fields: [comment_id], references: [id])
  post            Post?    @relation(fields: [post_uuid], references: [uuid])
  user            User?    @relation("photos", fields: [user_uuid], references: [uuid])
  share           Share?   @relation(fields: [share_id], references: [id])
  avatar          Avatar?  @relation(fields: [avatar_id], references: [id])
  avatar_id       Int?     @unique
  created_at      DateTime @default(now()) @db.Timestamptz(3)
  updated_at      DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model Avatar {
  id    Int    @id @default(autoincrement())
  user  User?
  photo Photo?
}

model Like {
  id        Int    @id @default(autoincrement())
  user_uuid String @db.Uuid
  post_uuid String @db.Uuid
  post      Post   @relation(fields: [post_uuid], references: [uuid], onDelete: Cascade)
  user      User   @relation(fields: [user_uuid], references: [uuid], onDelete: SetNull)
}

model Notification {
  id         Int      @id @default(autoincrement())
  receiver   User     @relation(fields: [user_uuid], references: [uuid])
  user_uuid  String   @db.Uuid
  message    String
  created_at DateTime @default(now()) @db.Timestamptz(3)
}

enum Role_Names {
  Admin
  User
}

enum LANGUAGES {
  rus
  eng
}
